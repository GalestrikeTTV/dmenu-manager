/// The module `core` is used to initialize a session mandwm,
/// if it doesn't already exist
use crate::DBUS_NAME;

use dbus::{blocking::LocalConnection, tree::Factory};
use std::time::Duration;

pub struct MandwmCore {
    pub dwm_bar_string: Vec<String>,
    pub delimiter: String,
}

impl MandwmCore {
    /// Called once the MandwmCore object is initialized.
    pub fn connect(mut self) -> Result<Self, std::io::Error> {
        let conn = LocalConnection::new_session()?;

        conn.request_name(DBUS_NAME, false, true, false).expect(
            String::from(format!("Couldn't request name of {}", DBUS_NAME)));

        let _factory = Factory::new_fn::<()>();

        let proxy = conn.with_proxy("org.freedesktop.DBus", "/", Duration::from_millis(5000));

        let (names,): (Vec<String>,) =
            proxy.method_call("org.freedesktop.DBus", "ListNames", ())?;
        for name in names {
            println!("{:?}", name);
        }
        conn.release_name(DBUS_NAME)?;

        Ok(self)
    }

    pub fn set_delimiter<T: Into<String>>(mut self, delimiter: T) -> Self {
        self.delimiter = delimiter.into();
        self
    }
}

impl Default for MandwmCore {
    fn default() -> Self {
        MandwmCore {
            dwm_bar_string: Vec::new(),
            delimiter: "|".to_string(),
        }
    }
}

pub fn setup_mandwm() -> Result<MandwmCore, Box<dyn std::error::Error>> {
    let _args: Vec<String> = std::env::args().collect();

    Ok(MandwmCore::default())
}
